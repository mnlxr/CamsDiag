/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.Echarts;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import static main.CamReqs.MainInfo.CamJobName;
import static main.CamReqs.MainInfo.NumberOfCams;
import static main.Echarts.Echarts_SetOptions.CamChartSetOptions;
import static main.Echarts.Echarts_SetOptions.CamChart_Graphic;
import static main.Echarts.Echarts_SetOptions.CamChart_Grid;
import static main.Echarts.Echarts_SetOptions.CamChart_Legend;
import static main.Echarts.Echarts_SetOptions.CamChart_Series;
import static main.Echarts.Echarts_SetOptions.CamChart_TextStyle;
import static main.Echarts.Echarts_SetOptions.CamChart_Title;
import static main.Echarts.Echarts_SetOptions.CamChart_Toolbox;
import static main.Echarts.Echarts_SetOptions.CamChart_Tooltip;
import static main.Echarts.Echarts_SetOptions.CamChart_Variables;
import static main.Echarts.Echarts_SetOptions.CamChart_dataZoom;
import static main.Echarts.Echarts_SetOptions.CamChart_xAxis;
import static main.Echarts.Echarts_SetOptions.CamChart_yAxis;
import static main.MnIT_Main.CheckMachineMotionCam;
import static main.common.Folders.PathWebServer;
import static main.common.Folders.mainFolder;

/**
 *
 * @author MManolas
 */
public class JS_Parameters {

    public static void main(String args[]) throws Exception {
        CamParametersChart();
    }

    public static void CamParametersChart() throws IOException {
        for (int i = 1; i <= NumberOfCams(); i++) {
            File statText = new File(PathWebServer+"//"+mainFolder+"//"+
                    CamJobName() + "//cams//cam" + i + ".js");
            FileOutputStream is = new FileOutputStream(statText);
            OutputStreamWriter osw = new OutputStreamWriter(is, StandardCharsets.UTF_8);
            try (Writer w = new BufferedWriter(osw)) {
                w.write(
                        CamChartSetOptions(i)
                        //GetCamChartOptions(i)
                        //Echarts_Options(i) 
                        //+"/*\n"
                        //+ GetCamChartOptions(i)
                        //+"*/\n"
                        //+ Echarts_Functions(i)
                );
            }
        }

    }

    public static String GetCamChartOptions(Integer t) {
        String h1 = "";
        h1 =    CamChart_Variables(t)
                + "////////////////////////////////////////////////////\n"
                + "//Start Of eChart" + t + "\n"
                + "////////////////////////////////////////////////////\n"
                + "var option_cam" + t + " = {\n"
                + CamChart_Graphic(t)
                + CamChart_Toolbox(t)
                + CamChart_Title(t)
                + CamChart_TextStyle()
                + CamChart_Legend(t)
                + CamChart_Tooltip(t)
                + CamChart_xAxis(t)
                + CamChart_yAxis(t)
                + CamChart_Grid()
                + CamChart_dataZoom(t)
                + "calculable: true,\n"
                + CamChart_Series(t)
                + "};\n"
                + "////////////////////////////////////////////////////\n"
                + "//End Of eChart" + t + "\n"
                + "////////////////////////////////////////////////////\n";
        return h1;
    }
    
    public static String Echarts_Options(Integer t) {
        String h1 = "";
        h1 = 
                CamChart_Variables(t)
                
                
//                "\n"
//                + "/*Cam #" + t + "*/\n"
////                + "var showLabels = false;\n"
////                + "var symbolSize = 20;\n "
//                + "var myChart_Cam" + t + " = echarts.init(document.getElementById('maincam" + t + "'), CamsDiag_theme);\n"
//                + "var shaftdiam_cam" + t + " = cam" + t + "diameter;\n"
//                + "var shaftdiam_label_cam" + t + " = \"Shaft Diameter : \" + shaftdiam_cam" + t + " + \" mm\";\n"
//                + "var AxisMax_cam" + t + " = Math.max.apply(null, cam" + t + "y) + 30;\n"
//                + "var AxisMin_cam" + t + " = 0;\n"
//                + "var Recc" + t + " = Math.max.apply(null, cam" + t + "y) - Math.min.apply(null, cam" + t + "y);\n"
//                + "//////////////////////////////////////////////\n"
//                + "var points" + t + " = [];\n"
//                + "//////////////////////////////////////////////\n"
//                + "var mycanvas" + t + " = $(\"#maincam" + t + "\").find(\"canvas\")[0];\n"
//                + "//////////////////////////////////////////////\n"
//                + "var data_cam" + t + " = [];\n"
//                + "for (i = 0; i < cam" + t + "x.length; i++)\n"
//                + "{ data_cam" + t + ".push([cam" + t + "x[i], cam" + t + "y[i]]);}\n"
//                + "var datacam" + t + " = data_cam" + t + ";\n"
//                 + "//////////////////////////////////////////////\n"
//                //+ "//var max_of_Cam" + t + "R = Math.max.apply(Math, data_cam" + t + ");\n"
//                + "var crc" + t + "x = 50;\n"
//                + "var crc" + t + "y = 550;\n"
//                + "//var crc" + t + "x = 1100;\n"
//                + "//var crc" + t + "y = 60;\n"
//                + "var max" + t + "element = Math.max.apply(Math, cam" + t + "y);\n"
//                + "var min" + t + "element = Math.min.apply(Math, cam" + t + "y);\n"
//                + "var Degmax" + t + "element = Math.max.apply(Math, cam" + t + "x);\n"
//                + "var Degmin" + t + "element = Math.min.apply(Math, cam" + t + "x);\n"                
//                + "var crc" + t + "_in = cam" + t + "diameter/3;\n"
//                + "var crc" + t + "_out = max" + t + "element/3;\n"
//                + "var arrow_cw = '\\u21BB'+' CW';\n"
//                + "var arrow_ccw = '\\u21BA'+' CCW';\n"
//                + "var diameterSymbol = '\\u2300';\n"
//                + "var MachineMotion='Machine Motion';\n"
//                + "var MachineDwell='Machine Dwell';\n"
//                + "var maxMotion=8;\n"
//                + "var MaxMotionMachine=110;\n"
//                + "var MaxValueYaxis=120;\n"
//                + CheckMachineMotion()
                + "//////////////////////////////////////////////\n"
                + ""
                + ""
                + ""
                + "//////////////////////////////////////////////\n"
                + "// Costumize the options and data of the chart.\n"
                + "var option_cam" + t + " = {\n"
                
                + "graphic: [\n"
                + "        {\n"
                + "\n"
                + "//invisible: true,\n" 
                + ""
                + "elements: [\n"
                + "{\n"
                + "//id: 'CamCircleOut" + t + "',\n"
                + "   type: 'circle',\n"
                + "   z: 100,\n"
                + "    cursor: 'hand',\n"
                + "    draggable: true,\n"
                + "    //invisible: true,\n"                
                + "   shape: {\n"
                + "    cx: crc" + t + "x,\n"
                + "    cy: crc" + t + "y,\n"
                + "    r:  crc" + t + "_out,\n"
                + "    //r: 10,\n"
                + "},\n"
                + "style: {\n"
                + "//fill: 'rgba(0, 140, 250, 0.5)',\n"
                + "fill: 'white',\n"
                + "opacity: chart_opacity, \n"                
                + "//stroke: 'rgba(0, 50, 150, 0.5)',\n"
                + "stroke: 'black',\n"
                + "lineWidth: 2,\n"
                + "},\n"
                + ""
                + "textContent: {\n"
                + "    z: 100,\n"
                + "    x: crc" + t + "x+30,\n"
                + "    y: crc" + t + "y,\n"
                + " style: {\n"
                + "    text: arrow_cw,\n"
                + "    //text: ChangeArrow(),\n"
                + "    //text:  function (params) {\n"
                + "//return arrow_ccw;\n"
                + "//},\n"                
                + "    fill: 'black',\n"
                + "    opacity: chart_opacity,\n"
                + "    font: 'bold 30px sans-serif'\n"
                + "}\n"
                + "},\n"
                + "//textConfig: {\n"
                + "//position: 'center'\n"
                + "//}\n"
                + ""
                + "},\n"
                + ""
                + ""
                + "\n"
                + "///*\n"
                + "{\n"
                + "//id: 'CamCircleIn" + t + "',\n"
                + "   type: 'circle',\n"
                + "   z: 100,\n"
                + "    //invisible: true,\n"                
                + "   shape: {\n"
                + "     cx: crc" + t + "x,\n"
                + "      cy: crc" + t + "y,\n"
                + "     r: crc" + t + "_in,\n"
                + "         //r: max" + t + "element, \n"
                + "      },\n"
                + "      style: {\n"
                + "        //fill: 'rgba(0, 140, 150, 0.5)',\n"
                + "         fill: 'white',\n"
                + "         opacity: chart_opacity, \n"
                + "        //stroke: 'rgba(0, 50, 150, 0.5)',\n"
                + "         stroke: 'black',\n"
                + "        lineWidth: 2,\n"
                + "      }\n"
                + "},\n"
                + "//*/\n"
                + "/*\n"
                + "{\n"
                + "id: 'CamCam" + t + "',\n"
                + "   type: 'bezierCurve',\n"
                + "   z: 100,\n"
                + "$action: 'merge',\n"
                + "    //invisible: true,\n"                
                + "   shape: {\n"
                + "  x1: 10,\n"
                + "   y1: 10,\n"
                + "   x2: 100,\n"
                + "   y2: 10,\n"
                + "  cpx1: 60,\n"
                + "   cpy1: 100"
                + "      },\n"
                + "      style: {\n"
                + "        //fill: 'rgba(0, 140, 150, 0.5)',\n"
                + "         fill: 'blue',\n"
                + "         opacity: chart_opacity, \n"
                + "        stroke: 'rgba(0, 50, 150, 0.5)',\n"
                + "       lineWidth: 2,\n"
                + "      }\n"
                + "},\n"
                + "*/\n"
                + ""
                + ""
                + "        {\n"
                + "            type: 'group',\n"
                + "            rotation: Math.PI / 4,\n"
                + "            bounding: 'raw',\n"
                + "            right: 30,\n"
                + "            bottom: 30,\n"
                + "            z: 100,\n"
                                //+ "$action: 'remove',\n"
                + "             //invisible: true,\n"
                + "            children: [\n"
                + "                {\n"
                + "                    type: 'rect',\n"
                + "                    left: 'center',\n"
                + "                    top: 'center',\n"
                + "$action: 'merge',\n"
                + "                    z: 100,\n"
                + "                    shape: {\n"
                + "                        width: 400,\n"
                + "                        height: 30\n"
                + "                    },\n"
                + "                    style: {\n"
                + "                        fill: 'rgba(0,0,0,0.3)'\n"
                + "                    }\n"
                + "                },\n"
                + "                {\n"
                + "                    type: 'text',\n"
                + "                    left: 'center',\n"
                + "                    top: 'center',\n"
                + "                    z: 100,\n"
                + "                    style: {\n"
                + "                        fill: '#fff',\n"
                + "                        text: 'C" + t + "',\n"
                + "                        font: 'bold 15px sans-serif'\n"
                + "                    }\n"
                + "                }\n"
                + "            ]\n"
                + "        },\n"
                + ""
                + "],\n"
                + "\n"

//                + "{\n"
//                + "            type: 'group',\n"
//                + "            rotation: Math.PI / 4,\n"
//                + "            bounding: 'raw',\n"
//                + "            right: 100,\n"
//                + "            bottom: 100,\n"
//                + "            z: 100,\n"
//                + "            children: [\n"
//                + "                {\n"
//                + "                    type: 'rect',\n"
//                + "                    left: 'center',\n"
//                + "                    top: 'center',\n"
//                + "                    z: 100,\n"
//                + "                    shape: {\n"
//                + "                        width: 400,\n"
//                + "                        height: 20\n"
//                + "                    },\n"
//                + "                    style: {\n"
//                + "                        fill: 'rgba(0,0,0,0.3)'\n"
//                + "                    }\n"
//                + "                },\n"
//                + "                {\n"
//                + "                    type: 'text',\n"
//                + "                    left: 'center',\n"
//                + "                    top: 'center',\n"
//                + "                    z: 100,\n"
//                + "                    style: {\n"
//                + "                        fill: '#fff',\n"
//                + "                        text: 'C" + t + "',\n"
//                + "                        font: 'bold 12px sans-serif'\n"
//                + "                    }\n"
//                + "                }\n"
//                + "            ],}\n"
                + ""
                + "\n"
                + "        },],\n"
                + ""
                + ""
                + "  textStyle: {\n"
                + "    fontFamily: 'sans-serif'\n"
                + "  },\n"
                
                +CamChart_Title(t)
//                + " title: {\n"
//                + "        text: cam" + t + "label + \" - C" + t + "\\n\" + cam" + t + "descl,\n"
//                + "        padding: 10,\n"
//                +"          show: true,\n"
//                + "        textStyle: {\n"
//                + "            color: text_color,\n"
//                + "            fontStyle: 'normal',\n"
//                + "            fontWeight: 'bold',\n"
//                + "            fontSize: 14,\n"
//                + "            align: 'center'\n"
//                + "        },\n"
//                + "        subtext: \"Eccentric  : \" + Recc" + t + " + \" mm\""
//                + "+\"\\nRmax : \"+max" + t + "element+\" mm\\nRmin : \"+min" + t + "element+\" mm\",\n"
//                
//                + "        subtextStyle: {\n"
//                + "            padding: 15,\n"
//                + "            color: text_color,\n"
//                + "            fontSize: 13\n"
//                + "        },\n"
//                + "        itemGap: 5\n"
//                + "    },\n"
                
                +CamChart_Legend(t)
//                + "    legend: {\n"
//                + "        type: \"scroll\",\n"
//                + "        show: true,\n"
//                + "        data: [cam" + t + "descl],\n"
//                + "        lineStyle: {\n"
//                + "            shadowOffsetY: 1.5,\n"
//                + "            color: text_color\n"
//                + "        },\n"
//                + "        textStyle: {\n"
//                + "            fontStyle: \"normal\",\n"
//                + "            borderDashOffset: 2,\n"
//                + "            textShadowBlur: 1\n"
//                + "        },\n"
//                + "        icon: \"roundRect\"\n"
//                + "    },\n"
                +CamChart_Toolbox(t)
//                + "    toolbox: {\n"
//                + "        itemSize: 20,\n"
//                + "         right: 50,\n"
//                +"          show: true,\n"
//                + "        feature: {\n"
//                + "            mark: {show: true},\n"
//                + "            dataView: {show: true,\n"
//                + "                readOnly: false,\n"
//                + "                title: 'Data View',\n"
//                + "                lang: [cam" + t + "label + \" Data : \", 'Close', 'Refresh Data'],\n"
//                + "                backgroundColor: 'rgb(252, 184, 49)',\n"
//                + "                textColor: '#222',\n"
//                + "                buttonColor: '#c23531'           \n"
//                + "            },\n"
//                + "            magicType: {\n"
//                + "                show: true, \n"
//                + "                type: ['line', 'bar'],\n"
//                + "            barMaxWidth:'20%'\n"
//                + "        },\n"
//                + "            saveAsImage: {\n"
//                + "                backgroundColor: '#FFF',\n"
//                + "                excludeComponents: ['toolbox'],\n"
//                + "                show: true,\n"
//                + "                type: imgexport\n"
//                + "            },\n"
//                + "            dataZoom: {show: true},\n"
//                + "            restore: {show: true}\n"
//                + "        }\n"
//                + "    },\n"
                
                +CamChart_Tooltip(t)
                + "    tooltip: {\n"
                + "        trigger: 'axis',\n"
                + "        confine: true,\n"
                + "         //snap: true,\n"
                
//                + "formatter: function (params) {\n"
//                + "            return 'R : ' + params.data[0].toFixed(2) + '<br>Deg : ' + params.data[1].toFixed(2);\n"
//                + "        },\n"
                
                //+ "        formatter: '{b0}: {c0}<br />{b1}: {c1}<br />{d} {d0}',\n"
//                + "function (params" + t + ") {\n"
//                + "            param" + t + " = params" + t + "[0];\n"
//                + "            var val" + t + " = '<li style=\"list-style:none\">' + params" + t + ".marker + \" \" +\n"
//                + "                    '&nbsp;&nbsp;' + 'R(mm) = ' + params" + t + ".value[1] + ' mm, Deg = ' + params" + t + ".value[0] + ' °' + '</li>';\n"
//                + "            return val" + t + ";\n"
//                + "        },\n"                
                
                
                + "        formatter: function (params) {\n"
                + "            params = params[0];\n"
                + "            var val = '<li style=\"list-style:none\">' + params.marker + \" \" +\n"
                + "                    '&nbsp;&nbsp;' + 'R(mm) = ' + params.value[1] + ' mm, Deg = ' + params.value[0] + ' °' + '</li>';\n"
                + "            return val;\n"
                + "        },\n"
                
                + "\n"
                + "        axisPointer: {\n"
                + "            type: 'cross',\n"
                + "            //axis: 'y',\n"
                + "            animation: false,\n"
                + "            lineStyle: {\n"
                + "                color: text_color,\n"
                + "                shadowBlur: 4,\n"
                + "                shadowColor: '#000',\n"
                + "                shadowOffsetX: 3,\n"
                + "                shadowOffsetY: 3\n"
                + "            }\n"
                + "        },\n"
                + "        position: 'center',\n"
                + "        label: {\n"
                + "            backgroundColor: '#6a7985'\n"
                + "\n"
                + "        }\n"
                + "    },    \n"
                
                
                + "    grid: {\n"
                + "        left: '5%',\n"
                + "        right: '5%',\n"
                + "        bottom: '10%',\n"
                + "        top: '20%',\n"
                + "        containLabel: true,\n"
                + "        show: true\n"
                + "    },\n"
                + "    xAxis: {\n"
                + "        type: 'value',\n"
                + "        id: 'cam" + t + "X',\n"
                + "        scale: false,\n"
                + "        data: datacam" + t + ",\n"
                + "        boundaryGap: false,\n"
                + "        splitNumber: 10,\n"
                + "        min: 0,\n"
                + "        max: 360,\n"
                + "        interval: 10,\n"
                + "        axisTick: {\n"
                + "            inside: true,\n"
                + "            show: true,\n"
                + "            alignWithLabel: true\n"
                + "        },\n"
                + "        axisLine: {\n"
                + "            symbol: ['none', 'arrow'],\n"
                + "            lineStyle: {\n"
                + "                color: 'black'\n"
                + "            },\n"
                + "            symbolOffset: 10,\n"
                + "            show: true\n"
                + "        },\n"
                + "        splitLine: {\n"
                + "            show: true,\n"
                + "            lineStyle: {\n"
                + "                type: 'solid',\n"
                + "                color: '#ccc'\n"
                + "            }\n"
                + "        },\n"
                + "        minorTick: {\n"
                + "            show: true\n"
                + "        },\n"
                + "        minorSplitLine: {\n"
                + "            show: true\n"
                + "        },\n"
                + "        axisLabel: {\n"
                + "            formatter: \"{value} °\"\n"
                + "        }\n"
                + "    },\n"
                + "    yAxis: {\n"
                + "        type: 'value',\n"
                + "        id: 'cam" + t + "Y',\n"
                +"          scale: false,\n"
                + "        min: 0,\n"
                + "        max: AxisMax_cam" + t + ",\n"
                + "        interval: 10,\n"
                + "        boundaryGap: false,\n"
                + "        data: datacam1,\n"
                + "        splitNumber: 10,\n"
                + "        axisTick: {\n"
                + "            inside: true,\n"
                + "            show: true,\n"
                + "            alignWithLabel: true\n"
                + "        },\n"
                + "        axisLine: {\n"
                + "            symbol: ['none', 'arrow'],\n"
                + "            lineStyle: {\n"
                + "                color: 'black'\n"
                + "            },\n"
                + "            symbolOffset: 10,\n"
                + "            show: true\n"
                + "        },\n"
                + "        splitLine: {\n"
                + "            show: true,\n"
                + "            lineStyle: {\n"
                + "                type: 'solid',\n"
                + "                color: '#ccc'\n"
                + "            }\n"
                + "        },\n"
                + "        minorTick: {\n"
                + "            show: true\n"
                + "        },\n"
                + "        minorSplitLine: {\n"
                + "            show: true\n"
                + "        },\n"
                + "        axisLabel: {\n"
                + "            formatter: \"{value} mm\"\n"
                + "        }\n"
                + "    },\n"
                + "    calculable: true,\n"
                + "\n/*\n"
                + "    dataZoom: [\n"
                + "        {\n"
                + "            type: 'inside',\n"
                + "            realtime: true,\n"
                + "            xAxisIndex: [0],\n"
                + "            start: 0,\n"
                + "            end: 360\n"
                + "        },\n"
                + "        {\n"
                + "            type: 'inside',\n"
                + "            realtime: true,\n"
                + "            yAxisIndex: [0],\n"
                + "            start: 0,\n"
                + "            end: 120\n"
                + "        }\n"
                + "    ],    \n"
                + "\n*/\n"
                + "    series: [{\n"
                + "            id: 'cam" + t + "',\n"
                + "            data: data_cam" + t + ",\n"
                + "            name: cam" + t + "descl,\n"
                + "            type: 'line',\n"
                + "            //stack: 'all',\n"
                + "            symbolSize: symbolSize,\n"
                + "            smooth: false,\n"
                + "            opacity: chart_opacity,\n"
                + "            markLine: {\n"
                + "                symbol: \"none\",\n"
                + "                data: [\n"
                + "                    {\n"
                + "                        silent: false,\n"
                + "                        lineStyle: {\n"
                + "                            type: \"dashed\",\n"
                + "                           // color: \"#FA3934\",\n"
                + "                            width: linestulemfasis - 3,\n"
                + "                            opacity: chart_opacity+0.3\n"
                + "                        },\n"
                + "                        label: {\n"
                +"                              show: true,\n"
                + "                             position: 'middle',\n"
                + "                            formatter: \"Shaft Diameter \"+diameterSymbol+\" :\\n\"+shaftdiam_cam" + t + " + ' mm',\n"
                + "                            fontSize: '15'\n"
                + "                        },\n"
                + "                        yAxis: shaftdiam_cam" + t + "\n"
                + "                    }]},\n"
                + "\n"
                + "            markArea: {\n"
                + "                animation: true,\n"
                + "                animationEasing: \"quarticIn\",\n"
                + "                z: -1,\n"
                + "\n"
                + "                itemStyle: {\n"
                + "                    normal: {\n"
                + "                        color: bic_color,\n"
                + "                        opacity: chart_opacity\n"
                + "                    },\n"
                + "                    emphasis: {\n"
                + "                        color: shaftcolor_emp,\n"
                + "                        opacity: chart_opacity\n"
                + "                    }\n"
                + "                },\n"
                + "                label: {\n"
                + "                    show: false,\n"
                + "                    position: 'top',\n"
                + "                    color: \"grey\",\n"
                + "                    fontSize: 12\n"
                + "                },\n"
                + "                labelLayout: {\n"
                + "                    hideOverlap: true\n"
                + "                },\n"
                + "                data: [\n"
                + "                    [{\n"
                + "                            name: shaftdiam_label_cam" + t + ",\n"
                + "                            yAxis: 0\n"
                + "                        }, {\n"
                + "                            yAxis: shaftdiam_cam" + t + "\n"
                + "                        }]\n"
                + "                ]\n"
                + "            },\n"
                + "\n"
                + CheckMachineMotionCam(t)
                + "            emphasis: {\n"
                + "                focus: 'series',\n"
                + "                lineStyle: {\n"
                + "                    width: linestulemfasis + 3,\n"
                + "                    opacity: chart_opacity\n"
                + "                }\n"
                + "            },\n"
                + "            label: {\n"
                + "                show: showLabels\n"
                + "                //show: config.Labels\n"
                + "            },\n"
                + "            lineStyle: {\n"
                + "                width: linestulemfasis,\n"
                + "                shadowColor: 'black',\n"
                + "                oppacity: 0.5,\n"
                + "                shadowBlur: 5,\n"
                + "                shadowOffsetY: 2,\n"
                + "                color: shaftcolor_emp\n"
                + "            },\n"
                + "            z: 0,\n"
                + "            areaStyle: {\n"
                + "                color: bic_color,\n"
                + "                origin: \"start\",\n"
                + "                offset: 0,\n"
                + "                opacity: 0.75\n"
                + "            }\n"
                + "        }]\n"
                + "};\n"
                + "////////////////////////////////////////////////////\n"
                + "//End Of Chart" + t + "\n"
                + "////////////////////////////////////////////////////\n";
        return h1;
    }

    public static String Echarts_Functions(Integer t) {
        String h1 = "";
        h1 = "\n\n//////Functions\n\n"
                + "//Show Loading\n"
                + "myChart_Cam" + t + ".showLoading({\n"
                + "      text: 'Please Wait..',\n"
                + "      color: '#c23531',\n"
                + "      textColor: '#000',\n"
                + "      maskColor: 'rgba(255, 255, 255, 0.2)',\n"
                + "      zlevel: 1\n"
                //+ "      zlevel: 1\n"
                + "    });;\n"
                + "setTimeout(() => {\n"
                + "  myChart_Cam" + t + ".hideLoading();\n"
                + "  myChart_Cam" + t + ".setOption(option_cam" + t + ");\n"
                + "}, 1000);\n"
                + "\n"

                
                
                //+ "\n/*"
                + "var zr" + t + " = myChart_Cam" + t + ".getZr();\n"
                + "\n"
                + "zr" + t + ".on('click', function (params) {\n"
                + "    var pointInPixel = [params.offsetX, params.offsetY];\n"
                + "    var pointInGrid = myChart_Cam" + t + ".convertFromPixel('grid', pointInPixel);\n"
                + "\n"
                + "    if (myChart_Cam" + t + ".containPixel('grid', pointInPixel)) {\n"
                + "        data_cam" + t + ".push(pointInGrid);\n"
                + "\n"
                + "        myChart_Cam" + t + ".setOption({\n"
                + "            series: [{\n"
                + "                    id: 'cam" + t + "',\n"
                + "                    data: data_cam" + t + "\n"
                + "                }]\n"
                + "        });\n"
                + "    }\n"
                + "});\n"
                + "\n"
                + "zr" + t + ".on('mousemove', function (params) {\n"
                + "    var pointInPixel = [params.offsetX, params.offsetY];\n"
                + "    zr" + t + ".setCursorStyle(myChart_Cam" + t + ".containPixel('grid', pointInPixel) ? 'copy' : 'default');\n"
                + "});\n\n"
                //+ "*/"
                + "\n"
                + ""
                + "\n"
                + "\n//Drag Points\n"
                
                + "setTimeout(function () {\n"
                + "    // Add shadow circles (which is not visible) to enable drag.\n"
                + "    myChart_Cam"+t+".setOption({\n"
                + "        graphic: data_cam" + t + ".map(function (item, dataIndex) {\n"
                + "            return {\n"
                + "                type: 'circle',\n"
                + "                position: myChart_Cam"+t+".convertToPixel('grid', item),\n"
                + "                shape: {\n"
                + "                    cx: 0,\n"
                + "                    cy: 0,\n"
                + "                    r: symbolSize\n"
                + "                },\n"
                + "                invisible: true,\n"
                + "                draggable: true,\n"
                + "                ondrag: function (dx, dy) {\n"
                + "                    onPointDragging(dataIndex, [this.x, this.y]);\n"
                + "                },\n"
                + "                onmousemove: function () {\n"
                + "                    showTooltip(dataIndex);\n"
                + "                },\n"
                + "                onmouseout: function () {\n"
                + "                    hideTooltip(dataIndex);\n"
                + "                },\n"
                //+ "                z: 100\n"
                + "                z: 100\n"
                + "            };\n"
                + "        })\n"
                + "    });\n"
                + "}, 0);\n"
                + "\n"
                + "window.addEventListener('resize', updatePosition);\n"
                + "\n"
                + "myChart_Cam"+t+".on('dataZoom', updatePosition);\n"
                + "\n"
                + "function updatePosition() {\n"
                + "    myChart_Cam"+t+".setOption({\n"
                + "        graphic: data_cam" + t + ".map(function (item, dataIndex) {\n"
                + "            return {\n"
                + "                position: myChart_Cam"+t+".convertToPixel('grid', item)\n"
                + "            };\n"
                + "        })\n"
                + "    });\n"
                + "}\n"
                + "\n"
                + "function showTooltip(dataIndex) {\n"
                + "    myChart_Cam"+t+".dispatchAction({\n"
                + "        type: 'showTip',\n"
                + "        seriesIndex: 0,\n"
                + "        dataIndex: dataIndex\n"
                + "    });\n"
                + "}\n"
                + "\n"
                + "function hideTooltip(dataIndex) {\n"
                + "    myChart_Cam"+t+".dispatchAction({\n"
                + "        type: 'hideTip'\n"
                + "    });\n"
                + "}\n"
                + "\n"
                + "function onPointDragging(dataIndex, pos) {\n"
                + "    data_cam" + t + "[dataIndex] = myChart_Cam"+t+".convertFromPixel('grid', pos);\n"
                + "\n"
                + "    // Update data\n"
                + "    myChart_Cam"+t+".setOption({\n"
                + "        series: [{\n"
                + "                id: 'cam"+t+"',\n"
                + "                data: data_cam" + t + "\n"
                + "            }]\n"
                + "    });\n"
                + "}\n"
                + ""
                + ""
                + ""
                + ""
                + "function convertCanvasToImage() {\n"
                + "	\n"
                + "	html2canvas(document.getElementById('maincam" + t + "'), {\n"
                + "	        onrendered: function(canvas) {\n"
                + "	           /* document.body.appendChild(canvas); */\n"
                + "	            createPDFObject(canvas.toDataURL(\"image/jpeg\"));\n"
                + "	        }\n"
                + "	});\n"
                + "}\n\n"
                + ""
                + ""
                + "function createPDFObject(imgData) {\n"
         +"//Default a4 paper\n"
    +"var doc = new jsPDF('p', 'pt',\"a3\");\n"
    +"doc.addImage(imgData, 5, 5, 600, 300, 'img');\n"
    +"doc.save('GCXDATA_PDF.pdf');}\n\n"

                
//                + "function PrintImage() {\n"
//                + "// The echarts picture turn into 64-encoded picture\n"
//                + "var img = new Image();\n"
//                + "var imgSrc" + t + " = myChart_Cam" + t + ".getDataURL();\n"
//                + "// Render the chart shown above\n"
//                + "$(\"#printImg" + t + "\").attr(\"src\", imgSrc" + t + ").show();\n"
//                + "// here to use the delay to load, it will not print the picture has not invoked when rendered methods\n"
//                + "setTimeout(function() {\n"
//                + "// directly invoke the browser print function\n"
//                + "bdhtml = window.document.body.innerHTML;\n"
//                + "// define the print start character region, taken according to this local page content     \n"
//                + "sprnstr = \"0\"; // print mark area starting\n"
//                + "eprnstr = \"550\"; // print end region tag  \n"
//                + "prnhtml = bdhtml.substr(bdhtml.indexOf(sprnstr) + 17);\n"
//                + "prnhtml = prnhtml.substring(0, prnhtml.indexOf(eprnstr));\n"
//                + "// Restore page content\n"
//                + "window.document.body.innerHTML = prnhtml;\n"
//                + "// start printing\n"
//                + "window.print();\n"
//                + "}, 1000);\n"
//                + "\n"
//                + "}\n"
                
                
//                + "function create_zip() {\n"
//                + "// create a file\n"
//                + "zip.file(\"hello.txt\", \"Hello[p my)6cxsw2q\");\n"
//                + "// oops, cat on keyboard. Fixing !\n"
//                + "zip.file(\"hello.txt\", \"Hello World\\n\");\n"
//                + "\n"
//                + "// create a file and a folder\n"
//                + "zip.file(\"nested/hello.txt\", \"Hello World\\n\");\n"
//                + "// same as\n"
//                + "zip.folder(\"nested\").file(\"hello.txt\", \"Hello World\\n\");"
//                + "}\n\n"
                
                + "\n/*"
                + "function GetObjImage() {\n"
                + "var obj = document.getElementById(\"chartId" + t + "\");\n"
                + " var myChart = echarts.init(obj);// $obj is the native dom object\n"
                + "myChart.getDataURL({\n"
                + "	 type: 'png', //png | jpeg\n"
                + "	 pixelRatio: 2,  \n"
                + "	  backgroundColor:'#fff' //The background color is white\n"
                + "});\n"
                + "}\n\n"
                + "function GetImage() {\n"
                + "var echartCanvas = $(\"#echartId" + t + "\").find(\"canvas\")[0];\n"
                + "var image" + t + " = echartCanvas.toDataURL(\"image/png\");\n"
                + "var a" + t + " = document.createElement('a" + t + "');\n"
                + "a" + t + ".setAttribute(\"href\", image" + t + ");\n"
                + "a" + t + ".setAttribute(\"download\", \"picture name\");\n"
                + "a" + t + ".click();\n"
                + "}\n\n"
                + "var chart" + t + "  = echarts.init(document.querySelector('#maincam" + t + "'), null);\n"
                + "window.addEventListener('resize',function(){\n"
                + "  chart" + t + ".resize();\n"
                + "});\n"
                + "\n"
                + "\n"
                + ""
                + "var img = new Image();\n"
                + "img.src = myChart_Cam" + t + ".getDataURL({\n"
                + "    pixelRatio: 2,\n"
                + "    backgroundColor: '#fff'\n"
                + "});"
                + "\n"
                + "function imgCh" + t + "() {\n"
                + "var x = img.src;\n"
                + "return x;\n"
                + "}\n"
//                + "function ImageSrc" + t + "(){\n"
//                + "var img = new Image();\n"
//                + "img.src = myChart_Cam" + t + ".getDataURL({\n"
//                + "    pixelRatio: 2,\n"
//                + "    backgroundColor: '#fff'\n"
//                + "});\n"
//                + "return img;\n"
//                + "}\n"
                + "\n"
                + ""
//                + "    // Get canvas information\n"
//                + "    let canvas" + t + " = document.getElementsByTagName(\"canvas" + t + "\");\n"
//                + "    if(canvas" + t + "&&canvas" + t + ".length>0){\n"
//                + "        // create label\n"
//                + "        let tempA" + t + " = document.createElement(\"a" + t + "\");\n"
//                + "        // Set download name\n"
//                + "        tempA" + t + ".download = \"echarts download\" +\".png\";\n"
//                + "        // Set address and file type\n"
//                + "        tempA" + t + ".href = canvas" + t + "[" + t + "].toDataURL(\"image/png\");\n"
//                + "        document.body.appendChild(tempA" + t + ");\n"
//                + "        // Trigger download event\n"
//                + "        tempA" + t + ".click();\n"
//                + "        // Remove Tag\n"
//                + "        tempA" + t + ".remove();\n"
//                + "     }\n"
//                + ""
//                + "\n"
                
                
                
//                + "            getFullCanvasDataURL(divId){\n" +
//"                                 //Use the first canvas as a benchmark.\n" +
//"                var baseCanvas = $(\"#\"+divId).find(\"canvas\").first()[0];\n" +
//"                if(!baseCanvas){\n" +
//"                    return false;\n" +
//"                };\n" +
//"                var width = baseCanvas.width;\n" +
//"                var height = baseCanvas.height;\n" +
//"                var ctx = baseCanvas.getContext(\"2d\");\n" +
//"                                 / / Traverse, add the subsequent canvas to the first one\n" +
//"                $(\"#\"+divId).find(\"canvas\").each(function(i,canvasObj){\n" +
//"                    if(i>0){\n" +
//"                        var canvasTmp = $(canvasObj)[0];\n" +
//"                        ctx.drawImage(canvasTmp,0,0,width,height);\n" +
//"                    }\n" +
//"                });\n" +
//"                                 / / Get the base64 bit url\n" +
//"                return baseCanvas.toDataURL();\n" +
//"            },"
                + "\n"
                + "var opts" + t + " = {\n"
                + "type: \"png\",\n"
                + "pixelRatio: 2,\n"
                + "backgroundColor: \"#fff\",\n"
                //+ "excludeComponents: Array.<string>\n"                
                + "};\n"
                + "\n"
                + ""
                + "var resBase64" + t + " = myChart_Cam" + t + ".getDataURL(opts" + t + ");\n"
                + "\n"
                + ""
                + "document.getElementById(\"img" + t + "\").innerHTML = resBase64" + t + ";\n"
                + ""
//                + "image2Base64: function(img) {\n"
//                + "  var canvas = document.createElement('canvas')\n"
//                + "  canvas.width = img.width\n"
//                + "  canvas.height = img.height\n"
//                + "  var ctx = canvas.getContext('2d')\n"
//                + "  ctx.drawImage(img, 0, 0, img.width, img.height)\n"
//                + "  var dataURL" + t + " = canvas.toDataURL('image/png')\n"
//                + "  return dataURL" + t + "\n"
//                + "}\n"
//                + ""
//                + ""
//                + "vue_this.result_img_url = resultImg //Background image url\n"
//                + "var option = {} //echarts configuration item\n"
//                + "vue_this.showImgLabel = false\n"
//                + "vue_this.showChartLabel = true\n"
//                + "var resultImgDiv = document.getElementById('result_img_div')\n"
//                + "var width = resultImgDiv.offsetWidth\n"
//                + "//Set the div size according to the size of the background image\n"
//                + "document.getElementById('result_charts').style.width = width + 'px'\n"
//                + "var img = new Image()\n"
//                + "var base64 = ''\n"
//                + "img.crossOrigin = 'anonymous'\n"
//                + "img.src = resultImg\n"
//                + "img.onload = function() {\n"
//                + "  //Convert the background image to base64\n"
//                + "  base64 = vue_this.image2Base64(img)\n"
//                + "  //Set height\n"
//                + "  var height = img.height * (resultImgDiv.offsetWidth / img.width)\n"
//                + "  document.getElementById('result_charts').style.height = height + 'px'\n"
//                + "  document.getElementById('result_img').style.height = height + 'px'\n"
//                + "  //Set the background image of echarts\n"
//                + "  option.graphic = [{\n"
//                + "    type: 'image',\n"
//                + "    id: 'one',\n"
//                + "    z: -10,\n"
//                + "    bounding: 'raw',\n"
//                + "    zlevel: 0,\n"
//                + "    style: {\n"
//                + "      image: base64,\n"
//                + "      width: width,\n"
//                + "      height: height\n"
//                + "    }\n"
//                + "  }]\n"
//                + "  var myChart = echarts.init(document.getElementById('result_charts'))\n"
//                + "  myChart.setOption(option)\n"
//                + "  setTimeout(function() {\n"
//                + "    var resultBase64 = myChart.getDataURL({\n"
//                + "      type: 'png',\n"
//                + "      pixelRatio: 2,  //Zoom in twice to download, then compress to the same size for display. Solve the problem of blurred generated pictures on the mobile terminal\n"
//                + "      backgroundColor: '#fff'\n"
//                + "    })\n"
//                + "    vue_this.result_img_url = resultBase64\n"
//                + "    //Using absolute positioning and z-index to make charts at the bottom layer to achieve coverage\n"
//                + "    //If you use v-show or v-if to achieve the replacement effect, the page will jitter instantly\n"
//                + "    document.getElementById('result_charts').style.position = 'absolute'  \n"
//                + "    vue_this.showImgLabel = true\n"
//                + "  }, 2000)\n"
//                + "}\n"
                + ""
                + ""
                + "*/"
                + "option_cam" + t + " && myChart_Cam" + t + ".setOption(option_cam" + t + ");\n"
                + "//chart" + t + " && option_cam" + t + " && myChart_Cam" + t + ".setOption(option_cam" + t + ");\n"
                + "//myChart_Cam" + t + ".setOption(option_cam" + t + ");\n";

        return h1;
    }
    
    public static String EchartsParameters_Table(Integer t) {
        String h1 = "";
        h1 = "function populateTable(boolHeaders, nColumns, dataArray) {\n"
                + "  let arrayCopy = dataArray.slice(0); // Create a copy as not to alter the original array\n"
                + "  let myTable = \"<table>\";\n"
                + "  // Populate headers\n"
                + "  if (boolHeaders == true) {\n"
                + "    myTable += \"<tr>\";\n"
                + "    for (let i = 0; i < nColumns; i++) {\n"
                + "      if (arrayCopy.length == 0) {\n"
                + "        myTable += \"<th>\" + \"\" + \"</th>\";\n"
                + "      } else {\n"
                + "        myTable += \"<th>\" + arrayCopy.shift() + \"</th>\";\n"
                + "      }\n"
                + "    }\n"
                + "    myTable += \"</tr>\";\n"
                + "  }\n"
                + "  // Populate body\n"
                + "  while (arrayCopy.length > 0) {\n"
                + "    myTable += \"<tr>\";\n"
                + "    for (let i = 0; i < nColumns; i++) {\n"
                + "      if (arrayCopy.length == 0) {\n"
                + "        myTable += \"<td>\" + \"\" + \"</td>\";\n"
                + "      } else {\n"
                + "        myTable += \"<td>\" + arrayCopy.shift() + \"</td>\";\n"
                + "      }\n"
                + "    }\n"
                + "    myTable += \"</tr>\";\n"
                + "  }\n"
                + "\n"
                + "  myTable += \"</table>\";\n"
                + "  return myTable;\n"
                + "}\n"
                + "\n"
                + "myTable = populateTable(true, 2, myArray);\n"
                + "document.getElementById(\"myDiv\").innerHTML = myTable;";
        return h1;
    }
    
    public static String EchartsOptions_ShowGraphic() {
        String h1 = "";
        
        return h1;
    }
    
}
