/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.utils;

import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import static main.CamReqs.MainInfo.WebServerPath;
import static main.common.CheckConnection.Get_StatusServer_Boolean;
import main.common.FileToString;
import static main.common.Folders.PathWebServer;
import static main.common.Folders.mainFolder;
import main.common.MainVars;
import static main.common.MainVars.CamsDiag_NofCams;
import static main.common.MainVars.aniscamsdiag01;
import static main.common.MainVars.aniscamsdiag01_Upload;
import static main.common.MainVars.aniscamsdiag01url;
import static main.common.MainVars.prod_server;
import main.common.Windows;
import static main.common.Windows.CheckApache;
import static main.common.Windows.CheckCamsDiagConnection;
import main.info.UserInfo;
import static main.pros.SystemProps.CamsDiag_MainPath;

/**
 *
 * @author MManolas
 */
public class TransferToView extends javax.swing.JFrame {

    /**
     * Creates new form TransferToView
     */
    public TransferToView() {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

   public void listFiles(String startDir) {
        try (Stream<Path> walk = Files.walk(Paths.get("D:/Programming"))) {
            // We want to find only regular files
            List<String> result = walk.filter(Files::isRegularFile)
                    .map(x -> x.toString()).collect(Collectors.toList());

            result.forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }  
        
//        File dir = new File(startDir);
//        File[] files = dir.listFiles();
//
//        if (files != null && files.length > 0) {
//            for (File file : files) {
//                // Check if the file is a directory
//                if (file.isDirectory()) {
//                    // We will not print the directory name, just use it as a new
//                    // starting point to list files from
//                    listDirectory(file.getAbsolutePath());
//                } else {
//                    // We can use .length() to get the file size
//                    System.out.println(file.getName() + " (size in bytes: " + file.length()+")");
//                }
//            }
//        }
    }    
    
    public static String DataBackUpDateServer() {
    String h1="";
    Date date = new Date();
    SimpleDateFormat formatter = new SimpleDateFormat("dd_MM_yyyy_HH_mm_ss");
System.out.println(formatter.format(date));
h1 = formatter.format(date);
    return h1;}  
    
    public static String DataBackUpDateOnlyServer() {
    String h1="";
    Date date = new Date();
    SimpleDateFormat formatter = new SimpleDateFormat("dd_MM_yyyy_HH_mm");
System.out.println(formatter.format(date));
h1 = formatter.format(date);
    return h1;}    
   
   
    public void CheckNetServer() {
        if (jLabel8.getText().endsWith(" is OK")) {
            jLabel8.setText( MainVars.aniscamsdiag01+" Connection : "+" is OK");
            System.out.println(MainVars.aniscamsdiag01+" Connection : "+" is OK");
            
        } else {
            jLabel8.setText("Please check your Connection to the Server. Connect, Close and Restart the Application");
            System.out.println(MainVars.aniscamsdiag01+" Connection : "+" is Not OK");
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cancelJobBt = new javax.swing.JButton();
        prodCBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusCopyProd = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        copyFilesBt = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        targetURLlabel = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/main/images/camsdiag01.png")).getImage());

        jLabel1.setFont(getFont());
        jLabel1.setText("CAMs Job Name : ");

        cancelJobBt.setFont(getFont());
        cancelJobBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/cancel.png"))); // NOI18N
        cancelJobBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJobBtActionPerformed(evt);
            }
        });

        prodCBox.setFont(getFont());
        try{
            prodCBox.setModel(new DefaultComboBoxModel(ReadPRODHTMLfiles()));
        } catch(Exception e) {}
        prodCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodCBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(getFont());
        jLabel2.setText("Source : ");

        statusCopyProd.setEditable(false);
        statusCopyProd.setColumns(20);
        statusCopyProd.setFont(getFont());
        statusCopyProd.setRows(5);
        jScrollPane1.setViewportView(statusCopyProd);

        jLabel3.setFont(getFont());
        jLabel3.setText("Target : ");

        copyFilesBt.setFont(getFont());
        copyFilesBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/go-next.png"))); // NOI18N
        copyFilesBt.setText("Upload to Server");
        copyFilesBt.setEnabled(false);
        copyFilesBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyFilesBtActionPerformed(evt);
            }
        });

        jLabel4.setFont(getFont());
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Ready to Copy...");

        jButton2.setFont(getFont());
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/exit.png"))); // NOI18N
        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(getFont());
        jLabel5.setText("::");

        jLabel6.setFont(getFont());
        jLabel6.setForeground(java.awt.Color.blue);
        jLabel6.setText("http://localhost");
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.setEnabled(false);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jButton3.setFont(getFont());
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/world.png"))); // NOI18N
        jButton3.setText("Open Source");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        targetURLlabel.setFont(getFont());
        targetURLlabel.setForeground(java.awt.Color.blue);
        targetURLlabel.setText(aniscamsdiag01);
        targetURLlabel.setEnabled(false);
        targetURLlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                targetURLlabelMouseClicked(evt);
            }
        });

        jButton4.setFont(getFont());
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/world_link.png"))); // NOI18N
        jButton4.setText("Open Target");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel8.setFont(getFont());
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        try{
            jLabel8.setText(CheckCamsDiagConnection());
        } catch(Exception e) {}

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(prodCBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelJobBt))
                    .addComponent(jScrollPane1)
                    .addComponent(copyFilesBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(targetURLlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(prodCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelJobBt))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(targetURLlabel)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(copyFilesBt, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(713, 554));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void prodCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodCBoxActionPerformed
        prodCBox.setEnabled(false);
        copyFilesBt.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(false);
        jLabel6.setEnabled(true);
        targetURLlabel.setEnabled(false);
        CheckNetServer();
//            if (prodCBox.getItemCount() != 0) {
//            statusCopyProd.setText("No Jobs Found.");
//        } else {
//        }   
            
        try {
            jLabel6.setText(WebServerPath() + prodCBox.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(TransferToView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String targetTexturl = aniscamsdiag01url
                +"charts/"
                +UserInfo.Get_UserName().toLowerCase()
                +"_"
                +UserInfo.Get_ComputerName().toLowerCase()
                +"/"
                //+prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)
                //+"/"
                +DataBackUpDateOnlyServer()+"/"
                +prodCBox.getSelectedItem().toString().substring(0, prodCBox.getSelectedItem().toString().length())
                //+"/"
                //+".html"
                ;
        
        //targetURLlabel.setText(targetTexturl);
        
//        String dir = aniscamsdiag01_Upload
//                +"\\"
//                +UserInfo.Get_UserName().toLowerCase()
//                +"_"
//                +UserInfo.Get_ComputerName().toLowerCase()
//                +"\\"
//                +DataBackUpDateOnlyServer()
//                +"\\"
//                +prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5);
//
//        File file = new File(dir);
//
//        // true if the directory was created, false otherwise
//        if (file.mkdirs()) {
//            System.out.println("Directory is created!");
//        } else {
//            System.out.println("Failed to create directory!");
//        }        
        
        String files01 = Windows.Check_PathWebServer()+mainFolder+"//"
                        +prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5);
        String files02 = Windows.Check_PathWebServer()+mainFolder+"//"
                        +prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)+"//python//";
        String files03 = Windows.Check_PathWebServer()+mainFolder+"//"
                        +prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)+"//cams//";
        
                try (Stream<Path> walk = Files.walk(Paths.get(Windows.Check_PathWebServer()+mainFolder+"//"
                        +prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)+"//")
                )) {
            // We want to find only regular files
            List<String> result = walk.filter(Files::isRegularFile)
                    .map(x -> x.toString()).collect(Collectors.toList());

            result.forEach(System.out::println);
            //result.forEach(System.out::println);
            
             String str = result.stream().map(Object::toString)
                          .collect(Collectors.joining("\n")); 
             String cmnts= "/*******************************/\n";
             String camsnumber = FileToString.F2String(PathWebServer + "//" + mainFolder + "//"
                    + prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)
                    + "//"+CamsDiag_NofCams);
             
                    statusCopyProd.append(cmnts);
                    String h1 = "";
                    Date date = new Date();
                    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                    System.out.println(formatter.format(date));
                    h1 = formatter.format(date);
                    statusCopyProd.append("Date : " + h1+"\n");
                    statusCopyProd.append("User Name : "+UserInfo.Get_UserName()+"\n");
                    statusCopyProd.append("Computer Name : "+UserInfo.Get_ComputerName()+"\n");
                    statusCopyProd.append("CAM Job : " + prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length() - 5) + "\n");
                    statusCopyProd.append("Number of Cams : " + camsnumber + "\n");
                    statusCopyProd.append(cmnts);
                    statusCopyProd.append(str.toString() + "\n");
                    statusCopyProd.append(cmnts);
                    String[] pathnames01;
                    String[] pathnames02;
                    String[] pathnames03;
                    File f01 = new File(files01);
                    File f02 = new File(files02);
                    File f03 = new File(files03);
            FilenameFilter filter = new FilenameFilter() {
        @Override
        public boolean accept(File f, String name) {
            String fname = f.getName().toLowerCase();
            return f.isFile();
        }
    };             
             pathnames01 = f01.list(filter);
             pathnames02 = f02.list(filter);
             pathnames03 = f03.list(filter);
             int fl01=f01.listFiles().length;
             int fl02=f02.listFiles().length;
             int fl03=f03.listFiles().length;
             
              statusCopyProd.append("Total Files & Folders : \n");
             statusCopyProd.append("Main Folders & Files: "+fl01+"\n");
             statusCopyProd.append("Total Cams Files: "+fl03+"\n");
             statusCopyProd.append("Total Python Files: "+fl02+"\n");
             statusCopyProd.append(cmnts);
             //statusCopyProd.append("Total  Files: "+fl01+fl02+fl03+"\n");
             
        } catch (IOException e) {
            e.printStackTrace();
        }
                
        try {
            if (Get_StatusServer_Boolean(MainVars.aniscamsdiag01url) == true) {
                copyFilesBt.setEnabled(true);
            } else {
                copyFilesBt.setEnabled(false);          
            }
        } catch (IOException ex) {
            Logger.getLogger(TransferToView.class.getName()).log(Level.SEVERE, null, ex);
        }
            targetURLlabel.setText(targetTexturl);    
        
    }//GEN-LAST:event_prodCBoxActionPerformed

    private void cancelJobBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJobBtActionPerformed
        prodCBox.setEnabled(true);
        copyFilesBt.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false); 
        jLabel6.setEnabled(false);
        jLabel6.setText("http://localhost");
        targetURLlabel.setEnabled(false);    
        targetURLlabel.setText(prod_server);
        statusCopyProd.setText("");
        targetURLlabel.setForeground(Color.red);
        targetURLlabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        targetURLlabel.setEnabled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel4.setText("Ready to Copy...");
        
    }//GEN-LAST:event_cancelJobBtActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            Desktop.getDesktop().browse(new URI(WebServerPath() + prodCBox.getSelectedItem().toString()));
        } catch (IOException | URISyntaxException e1) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        try {
            Desktop.getDesktop().browse(new URI(WebServerPath() + prodCBox.getSelectedItem().toString()));
        } catch (IOException | URISyntaxException e1) {
        }       
    }//GEN-LAST:event_jLabel6MouseClicked

    private void copyFilesBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyFilesBtActionPerformed
        String dir = aniscamsdiag01_Upload
                +"\\"
                +UserInfo.Get_UserName().toLowerCase()
                +"_"
                +UserInfo.Get_ComputerName().toLowerCase()
                +"\\"
                +DataBackUpDateOnlyServer()
                +"\\"
                +prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5);
        
        String dirMain = aniscamsdiag01_Upload
                +"\\"
                +UserInfo.Get_UserName().toLowerCase()
                +"_"
                +UserInfo.Get_ComputerName().toLowerCase()
                +"\\"
                +DataBackUpDateOnlyServer()
                //+"\\"
                //+prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)
                ;        

        String targetTexturl = aniscamsdiag01url
                +"charts/"
                +UserInfo.Get_UserName().toLowerCase()
                +"_"
                +UserInfo.Get_ComputerName().toLowerCase()
                +"/"
                //+prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)
                //+"/"
                +DataBackUpDateOnlyServer()+"/"
                +prodCBox.getSelectedItem().toString().substring(0, prodCBox.getSelectedItem().toString().length())
                //+"/"
                //+".html"
                ;        
        
        File file = new File(dir);
        File file01 = new File(dirMain);
        //file01.mkdirs();
        // true if the directory was created, false otherwise
        if (file.mkdirs()) {
            statusCopyProd.append("Directory is created!\n");
            //System.out.println("Directory is created!");
        } else {
            statusCopyProd.append("Failed to create directory or Already exists!\n");
        } 
    
        targetURLlabel.setText(targetTexturl);   
                //Source directory which you want to copy to new location
        File sourceFolder = new File(PathWebServer+mainFolder+"\\"+prodCBox.getSelectedItem().toString().substring(5, prodCBox.getSelectedItem().toString().length()-5)+"\\");
         Path sourcepath = sourceFolder.toPath();
        //Target directory where files should be copied
        File destinationFolder = new File(dir);
        Path destpath = destinationFolder.toPath();
        statusCopyProd.append("Please wait. Copy in progress...\n");
        
        File mainHtmlFile = new File(PathWebServer+mainFolder+"\\"+prodCBox.getSelectedItem().toString());
        
        Path mainhtmlPath = mainHtmlFile.toPath();
        File dir01 = new File(dirMain);
        Path dirhtml = dir01.toPath();
        
        try {
            Files.copy(Paths.get(PathWebServer+mainFolder+"\\"+prodCBox.getSelectedItem().toString()), 
                    Paths.get(
aniscamsdiag01_Upload
                +"\\"
                +UserInfo.Get_UserName().toLowerCase()
                +"_"
                +UserInfo.Get_ComputerName().toLowerCase()
                +"\\"
                +DataBackUpDateOnlyServer()
                +"\\"
                +prodCBox.getSelectedItem().toString()
                    ));
        } catch (IOException ex) {
            Logger.getLogger(TransferToView.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        try {
            copyFolder(sourcepath, destpath);
            //copyFolder(mainhtmlPath, dirhtml);
            statusCopyProd.append("Transfer is Done!!\n");
            jButton4.setEnabled(true);
            targetURLlabel.setForeground(Color.black);
            targetURLlabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            statusCopyProd.append("\n"
                    +"Please keep and  share this URL : \n"+targetURLlabel.getText()+"\n");
            
        ImageIcon h1 = null;
        if (CheckApache().endsWith(" is Running")) {
            h1 = createImageIcon("/main/images/apache.png", "");
        } else {
            h1 = createImageIcon("/main/images/cancel.png", "");

        }            
            
            
            jLabel4.setText("Copy is Done to : "+targetURLlabel.getText());
        } catch (IOException ex) {
            Logger.getLogger(TransferToView.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        targetURLlabel.setEnabled(true);
        
    }//GEN-LAST:event_copyFilesBtActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            Desktop.getDesktop().browse(new URI(targetURLlabel.getText()));
        } catch (IOException | URISyntaxException e1) {
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void targetURLlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_targetURLlabelMouseClicked
        try {
            Desktop.getDesktop().browse(new URI(targetURLlabel.getText()));
        } catch (IOException | URISyntaxException e1) {
        }
    }//GEN-LAST:event_targetURLlabelMouseClicked

    public  ImageIcon createImageIcon(String path,
                                           String description) {
    java.net.URL imgURL = getClass().getResource(path);
    if (imgURL != null) {
        return new ImageIcon(imgURL, description);
    } else {
        System.err.println("Couldn't find file: " + path);
        return null;
    }
}
    
    public  void copyFolder(Path src, Path dest) throws IOException {
        try (Stream<Path> stream = Files.walk(src)) {
            stream.forEach(source -> copy(source, dest.resolve(src.relativize(source))));
        }
    }
 
    private void copy(Path source, Path dest) {
        try {
            Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING);
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
    }  
    
    



    
    public static String[] ReadPRODHTMLfiles() throws IOException {
        String ph1 = CamsDiag_MainPath();

                    
        String[] list = null;
        try {
           //File tmp = new File(PathWebServer + "\\" + mainFolder);
            File tmp = new File(Windows.Check_PathWebServer()+mainFolder
                    //+PathWebServer.replaceAll("^\"|\"$", "")
                    //+"\\"
                    );
            System.out.println(tmp.toString());
            FilenameFilter filenameFilter = (file, s) -> s.startsWith("PROD") && s.endsWith(".html");

            list = tmp.list(filenameFilter);

            if (list != null) {
                Arrays.stream(list)
                        .forEach(System.out::println);
                //.forEach(System.out::println);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return list;
    }    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransferToView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransferToView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransferToView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransferToView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransferToView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelJobBt;
    private javax.swing.JButton copyFilesBt;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> prodCBox;
    private javax.swing.JTextArea statusCopyProd;
    private javax.swing.JLabel targetURLlabel;
    // End of variables declaration//GEN-END:variables
}
